{
  "89e28e13ecbf9fbcf235e16d453c08bbf2271244": {
    "summary": "This commit fixes issue #36119 in Django, addressing a UnicodeEncodeError that occurred when attaching files with 8-bit Content-Transfer-Encoding to emails. The fix involved:\n\n1. Modifying email message handling in `django/core/mail/message.py`\n2. Adding test cases in `tests/mail/tests.py` to verify the fix\n\nThe changes appear to be focused on email attachment encoding, with a moderate amount of code changes (8 lines modified in the main file and 24 new lines of tests added). This is a bug fix that improves Django's email handling capabilities for non-ASCII content.",
    "url": "https://github.com/django/django/commit/89e28e13ecbf9fbcf235e16d453c08bbf2271244"
  },
  "fd3cfd80bebad292d639a03e58632e494369eb92": {
    "summary": "Summary:\nThe commit makes minor formatting adjustments to Django's documentation files to prevent unwanted reformatting by a newer version of the Black code formatter. Changes were made to two files: the PostgreSQL aggregates documentation and the 1.10 release notes. The modifications appear to be primarily structural/formatting changes rather than content changes, with roughly equal numbers of additions and deletions.\n\nKey points:\n- Purpose: Prevent formatting conflicts with new Black version\n- Affected files: 2 documentation files\n- Type of changes: Formatting adjustments\n- Impact: Documentation only, no functional changes",
    "url": "https://github.com/django/django/commit/fd3cfd80bebad292d639a03e58632e494369eb92"
  },
  "cbb0812683cf3236e4a4003bf7f74b119d3cde0c": {
    "summary": "This commit addresses issue #35235 in Django by removing the caching of `BaseExpression._output_field_or_none`. The changes span three files:\n\n1. Modified `expressions.py` to remove field caching logic\n2. Added new tests in `tests/expressions/tests.py`\n3. Added additional PostgreSQL-specific tests in `postgres_tests/test_aggregates.py`\n\nThe main change appears to be removing a caching mechanism that was causing issues with expression output fields. The addition of 27 new test lines suggests this was a significant behavioral change that needed verification across both general and PostgreSQL-specific use cases.\n\nThis was likely done to fix a bug where cached output fields were causing incorrect behavior in certain expression evaluations.",
    "url": "https://github.com/django/django/commit/cbb0812683cf3236e4a4003bf7f74b119d3cde0c"
  },
  "12b9ef38b3ff7f5b8b24a5f42e8923fdb6db44bb": {
    "summary": "This commit adds functionality to customize the password change form in Django's admin site (issue #36121). The changes include:\n\n1. Modified `admin/sites.py` to allow overriding the default password change form\n2. Added documentation in the admin reference and Django 6.0 release notes\n3. Included new test cases to verify the customization functionality\n\nThe commit primarily enables developers to use their own password change form in the admin interface instead of being limited to Django's default form. The changes are relatively small (24 additions, 3 deletions) but provide important flexibility for admin site customization.",
    "url": "https://github.com/django/django/commit/12b9ef38b3ff7f5b8b24a5f42e8923fdb6db44bb"
  },
  "c6ace896a2da73356f7c9a655bbe32a0e3ce0435": {
    "summary": "This commit fixes issue #36155 in Django, addressing a regression in error handling for annotate queries. Here's what changed:\n\n1. Improved how errors are handled when annotate arguments require an alias\n2. Modified query handling in `django/db/models/query.py` (4 additions, 2 deletions)\n3. Added new test cases (18 lines) to verify the fix\n4. Added a new contributor to AUTHORS file\n\nThe fix addresses a regression that was introduced in a previous commit (ed0cbc8). The changes appear to focus on making error messages more helpful when annotations in Django queries require explicit aliases.",
    "url": "https://github.com/django/django/commit/c6ace896a2da73356f7c9a655bbe32a0e3ce0435"
  },
  "b84478ae953d049a1da42c3d0ef3ab3a9467b649": {
    "summary": "This commit removes documentation about an empty import example from Django's custom shell documentation. The removal was done because the same functionality can be achieved using the `--no-imports` flag, making the example redundant. This change addresses GitHub issue #36159 and simplifies the documentation by eliminating unnecessary content.\n\nThe change affects only one file (`docs/howto/custom-shell.txt`) and removes 13 lines of text.",
    "url": "https://github.com/django/django/commit/b84478ae953d049a1da42c3d0ef3ab3a9467b649"
  },
  "5a2c1bc07d126ce32efaa157e712a8f3a7457b74": {
    "summary": "This commit fixes issue #36118 in Django, addressing how bulk_update handles max_batch_size when dealing with models that have multiple primary keys.\n\nKey changes:\n- Modified database operations code for Oracle and SQLite3 backends to properly account for multiple primary keys\n- Updated query handling in models/query.py to better handle batch sizes\n- Added and updated tests for both Oracle and SQLite backends to verify the fixes\n- Minor adjustments to deletion handling\n\nThe main purpose appears to be improving Django's bulk update functionality when working with composite primary keys, ensuring proper batch size calculations across different database backends. The changes were co-authored with Simon Charette.",
    "url": "https://github.com/django/django/commit/5a2c1bc07d126ce32efaa157e712a8f3a7457b74"
  },
  "0671a461c44ba4cf97e84b6c88413bed332df314": {
    "summary": "This commit pins the isort package version to less than 6.0.0 in the GitHub Actions linting workflow. The change was made to prevent unwanted code reformatting that could occur with newer versions of isort. This is a maintenance change to ensure consistent code formatting across the Django project.\n\nKey points:\n- Changed file: .github/workflows/linters.yml\n- Purpose: Prevent formatting issues by restricting isort version\n- Constraint added: isort < 6.0.0",
    "url": "https://github.com/django/django/commit/0671a461c44ba4cf97e84b6c88413bed332df314"
  },
  "8a6b4175d790424312965ec77e4e9b072fba188b": {
    "summary": "This commit updates Django's release documentation to provide clearer guidance about release date management. The changes were made to \"howto-release-django.txt\" and specifically clarify that the Releaser has discretion in determining and potentially postponing release dates. With 6 lines added and 2 removed, it appears to be a focused documentation update to make the release process more explicit.\n\nThe key change seems to be adding more detail about the flexibility in scheduling releases, empowering the Releaser to make timing decisions based on their judgment.",
    "url": "https://github.com/django/django/commit/8a6b4175d790424312965ec77e4e9b072fba188b"
  },
  "efec74b90868c2e611f863bf4301d92ce08067e8": {
    "summary": "Summary:\nThis commit fixes Django issue #36122, which addresses how Django handles updates with composite reference values. The fix adds error handling to raise a FieldError in such cases. The changes involve:\n\n1. Adding validation logic in the SQL compiler (compiler.py)\n2. Including new test cases to verify the behavior (test_update.py)\n\nThe fix was prompted by a bug report from Jacob Walls and improves Django's error handling for composite primary key scenarios.",
    "url": "https://github.com/django/django/commit/efec74b90868c2e611f863bf4301d92ce08067e8"
  },
  "0ba35a49481c9fec4731ca0dd2230d8d48f51389": {
    "summary": "This commit updates Django's release process documentation to match current practices. The changes involve significant revisions to the release-process.txt file, with 47 lines added and 33 lines removed. The update was made by Sarah Boyce to ensure the documentation accurately reflects the current release workflow. Since this only affects documentation, it's a maintenance change to keep docs in sync with actual processes rather than a code change.",
    "url": "https://github.com/django/django/commit/0ba35a49481c9fec4731ca0dd2230d8d48f51389"
  },
  "72ff18d41cfb004ae180bdf87fd8bad93041c691": {
    "summary": "This commit addresses GitHub issue #36120 in Django, adding validation to prevent invalid updates on composite primary key fields. The changes:\n\n1. Added error handling in `subqueries.py` to raise a `FieldError` when attempting to update a composite primary key using `QuerySet.update()`\n2. Added corresponding test cases in `test_update.py` to verify the new validation behavior\n\nThe change improves Django's handling of composite primary keys by explicitly preventing potentially problematic updates and providing clearer error messages.",
    "url": "https://github.com/django/django/commit/72ff18d41cfb004ae180bdf87fd8bad93041c691"
  },
  "d9af197801376fae178761cac12d57178a738cf4": {
    "summary": "This commit updates the minimum supported versions of third-party package dependencies in Django to ensure compatibility with Python 3.12. Here's what changed:\n\n1. Updated dependency requirements in multiple files:\n   - Modified database backend configurations for MySQL and PostgreSQL\n   - Updated test requirements for MySQL, PostgreSQL, and Python 3\n   - Adjusted package versions in pyproject.toml\n\n2. Documentation updates:\n   - Added new version requirements to Django 6.0 release notes\n   - Updated database compatibility documentation\n   - Modified testing and email documentation\n   - Updated unit test documentation\n\nThe primary motivation was to align Django's dependencies with versions that support Python 3.12, ensuring the framework remains compatible with the latest Python release.\n\nThis appears to be a maintenance commit focused on dependency management and version compatibility, referenced by issue #36005.",
    "url": "https://github.com/django/django/commit/d9af197801376fae178761cac12d57178a738cf4"
  },
  "8eca4077f60fa0705ecfd9437c9ceaeef7a3808b": {
    "summary": "Summary:\nThis commit fixes a RecursionError bug (#36109) that occurred when using stacked FilteredRelation joins in Django's ORM. The fix involved adding code to handle recursive join scenarios, with 2 lines added to the query.py file. A test case with 22 new lines was added to verify the fix. The author Peter DeVita was also added to the AUTHORS file.\n\nThe changes appear focused on preventing infinite recursion when multiple FilteredRelation joins are used together in a query.",
    "url": "https://github.com/django/django/commit/8eca4077f60fa0705ecfd9437c9ceaeef7a3808b"
  },
  "9a71eca64bd3a357ef4846d81668d690089779c7": {
    "summary": "Summary:\nModified the admin_docs test to capture stderr output during reStructuredText parsing. This change was needed because the admindocs app doesn't specify a log level when parsing reStructuredText documentation, which can result in system messages being logged. The update affects a single test file with minimal changes (2 additions, 1 deletion).\n\nThe change appears to be a test improvement to handle expected logging behavior rather than a functional change to the admin docs feature itself.",
    "url": "https://github.com/django/django/commit/9a71eca64bd3a357ef4846d81668d690089779c7"
  },
  "330d89d4fe7832355535580383523f1749a3ee45": {
    "summary": "This commit fixes issue #36111 in Django where the --debug-sql test option would crash on Oracle databases when no queries had been executed yet. The fix involved:\n\n1. A one-line change in the Oracle database operations code\n2. Addition of 6 new test lines to verify the fix\n\nThe issue was specifically related to SQL debugging functionality when running tests against Oracle databases, and the fix ensures the system handles the case where no prior queries have been run.",
    "url": "https://github.com/django/django/commit/330d89d4fe7832355535580383523f1749a3ee45"
  },
  "9cc3970eaaf603832c075618e61aea9ea430f719": {
    "summary": "This commit made a documentation clarity improvement in Django's model fields reference (docs/ref/models/fields.txt). The change fixed an ambiguous pronoun reference, making the documentation more precise and easier to understand. It was a small change with just one line modified.\n\nThe commit appears to be a straightforward documentation cleanup, focusing on technical writing quality rather than functional changes to the codebase.",
    "url": "https://github.com/django/django/commit/9cc3970eaaf603832c075618e61aea9ea430f719"
  },
  "352d860b9107adbcde0f1fe5d0fce8e9090a51e4": {
    "summary": "This commit fixes test failures in Django's field_defaults test suite that were occurring due to year-end boundary conditions (issue #470). The changes affect only the test file (tests/field_defaults/tests.py), with 12 lines added and 3 removed. The fix likely addresses edge cases where tests were failing around the transition between years, which is a common issue in datetime-related testing.\n\nThe relatively small scope of changes (15 lines total) suggests this was a focused fix for a specific test reliability issue rather than a feature change.",
    "url": "https://github.com/django/django/commit/352d860b9107adbcde0f1fe5d0fce8e9090a51e4"
  },
  "f133285a9a7f3647fd55abc2e57b8a9a2c11ac94": {
    "summary": "This commit updates Django's internal release documentation, specifically the \"howto-release-django.txt\" file, to provide clearer instructions about feature freeze tasks. The changes were made by nessita with co-authorship from Sarah Boyce, involving significant revisions (120 lines added, 73 removed). The update aims to make the feature freeze process more understandable for Django maintainers during the release cycle.\n\nKey points:\n- Document: docs/internals/howto-release-django.txt\n- Purpose: Clarification of feature freeze procedures\n- Scope: Substantial revision (193 total line changes)",
    "url": "https://github.com/django/django/commit/f133285a9a7f3647fd55abc2e57b8a9a2c11ac94"
  },
  "2c47207b3c8412d16e61e388f176b47b41b40794": {
    "summary": "This commit fixes issue #36010 in Django, modifying how the compilemessages command checks file writability. The change affects how Django handles .mo files (compiled translation files) during the writability check process.\n\nThe main changes are in:\n1. compilemessages.py - Modified the file writability check logic\n2. test_compilation.py - Updated related tests to reflect the new behavior\n\nThe purpose appears to be avoiding unnecessary modifications to .mo files while simply checking if they can be written to. This is likely a performance and reliability improvement for Django's internationalization system.",
    "url": "https://github.com/django/django/commit/2c47207b3c8412d16e61e388f176b47b41b40794"
  },
  "29ba75e6e57414f0e6f9528d08a520b8b931fb28": {
    "summary": "Summary:\nRemoved IDNA-2003 (Punycode) encoding for international domain names in Django's URL handling utilities, specifically in `smart_urlquote()` and `Urlizer`. The change affects the AdminURLFieldWidget and urlize/urlizetrunc template filters.\n\nKey Changes:\n- Replaced IDNA-2003 encoding with percent-encoded UTF-8\n- Delegates IDNA handling to browsers, consistent with Django's other URL rendering\n- Updated related tests, particularly in admin widgets and template filters\n- Fixed issue #36013\n\nRationale:\nIDNA-2003 was obsolete and potentially problematic. The new approach using UTF-8 percent-encoding aligns better with modern web standards and Django's existing URL handling patterns.",
    "url": "https://github.com/django/django/commit/29ba75e6e57414f0e6f9528d08a520b8b931fb28"
  },
  "23c960a98e0d054d51dadda7049a54a083ef1155": {
    "summary": "This commit removes two unused GIS-related SVG icons (`move_vertex_off.svg` and `move_vertex_on.svg`) from Django's admin interface. These icons had been unused since a previous commit (4982958e) and were removed as part of issue #27674 to clean up obsolete assets.",
    "url": "https://github.com/django/django/commit/23c960a98e0d054d51dadda7049a54a083ef1155"
  },
  "9a1f18635ff034b039c24ed5121cced028fc27d0": {
    "summary": "This commit updates Django's documentation to use the vanity URL \"chat.djangoproject.com\" instead of direct Discord server references. The change affects multiple documentation files (9 files in total), including the README and various tutorial and contribution guides. Each file had one line changed (1 addition, 1 deletion), suggesting a simple URL replacement across the documentation. This change appears to be addressing issue #36125 and provides a more consistent and maintainable way to reference Django's Discord community.",
    "url": "https://github.com/django/django/commit/9a1f18635ff034b039c24ed5121cced028fc27d0"
  },
  "e262d5355d82901f81fba6c7015643c2b87125bf": {
    "summary": "This commit fixes issue #36114 in Django's admin interface, addressing a bug where list display links weren't properly handled when they contained only whitespace. \n\nThe changes were made in:\n1. Admin list template tags (`admin_list.py`) - Added 2 lines to handle whitespace-only fields\n2. Test suite (`tests.py`) - Added 11 lines of new tests to verify the fix\n\nThe fix ensures that list display links are properly visible even when the field contains only whitespace characters, improving the admin interface's robustness.",
    "url": "https://github.com/django/django/commit/e262d5355d82901f81fba6c7015643c2b87125bf"
  },
  "1b6ec1f944844f868cfac82f7d6f38d57c898900": {
    "summary": "Summary:\nChanged the GitHub Actions trigger from `pull_request` to `pull_request_target` in the Labels workflow. This change was necessary because the action needs access to labels (specifically the \"no ticket\" label) in the main django/django repository, which isn't available with the standard `pull_request` trigger due to security restrictions. The `pull_request_target` trigger provides the required access to the base repository's context.",
    "url": "https://github.com/django/django/commit/1b6ec1f944844f868cfac82f7d6f38d57c898900"
  },
  "64b1ac7292c72d3551b2ad70b2a78c8fe4af3249": {
    "summary": "This commit enables \"double squashing\" of Django migrations (issue #24529). Here's what changed:\n\nKey changes:\n- Modified the migration loader and squashmigrations command to support squashing already-squashed migrations\n- Removed previous restrictions that prevented squashing squashed migrations\n- Added extensive test coverage (134 new lines) for the new functionality\n- Updated documentation to reflect the new capability\n\nThe main technical changes were in:\n- django/db/migrations/loader.py (+31 lines): Enhanced to handle double-squashed migrations\n- django/core/management/commands/squashmigrations.py: Removed restrictions on squashing squashed migrations\n- Added multiple test migration files to verify the functionality\n\nThis change makes Django's migration system more flexible by allowing users to further consolidate their migration history, even when dealing with previously squashed migrations.",
    "url": "https://github.com/django/django/commit/64b1ac7292c72d3551b2ad70b2a78c8fe4af3249"
  },
  "322785b08cf21f2b7a627caf459e73e6170dd602": {
    "summary": "This commit adds a new `replace_migration` hook to Django's MigrationLoader class, referenced in issue #24529. The changes are focused in the migrations loader module, with 24 lines added and 21 lines removed.\n\nThe commit appears to enhance Django's migration system by providing a new hook for customizing how migrations are replaced or handled during the loading process. This is likely to improve flexibility in migration management.\n\nWithout access to the actual code changes, I can't provide specifics about the implementation, but the commit message and file location suggest this is a targeted enhancement to Django's migration system infrastructure.",
    "url": "https://github.com/django/django/commit/322785b08cf21f2b7a627caf459e73e6170dd602"
  },
  "00c690efbc0b10f67924687f24a7b30397bf47d9": {
    "summary": "Summary:\nThis commit fixes issue #36117 in Django by improving how CASE/WHEN expressions handle composite expressions. The change:\n\n1. Removes redundant resolution code in Case and When classes\n2. Delegates composite expression handling to BaseExpression\n3. Now raises a ValueError when invalid composite expressions are provided\n4. Adds test coverage for composite primary key filtering\n\nThe change simplifies the codebase by removing duplicate code while maintaining proper error handling. The fix was prompted by a bug report from Jacob Tyler Walls.",
    "url": "https://github.com/django/django/commit/00c690efbc0b10f67924687f24a7b30397bf47d9"
  },
  "a76035e925ff4e6d8676c65cb135c74b993b1039": {
    "summary": "Summary:\nThis commit consolidates how Django handles composite expression checks by moving the logic into the BaseExpression class. The main changes:\n\n1. Removed redundant checks from Func.resolve_expression\n2. Modified CombinedExpression to use the parent class's implementation for source expression resolution\n3. Centralized allows_composite_expressions checks into a single location\n\nThe change simplifies the codebase by reducing code duplication and standardizing how composite expressions are validated. Most changes were in expressions.py, with minor test adjustments in composite_pk tests.\n\nThis work was done to address issue #36042 in the Django project.",
    "url": "https://github.com/django/django/commit/a76035e925ff4e6d8676c65cb135c74b993b1039"
  },
  "136a1e89278070fd100f27d9519529be8a8a8c10": {
    "summary": "This commit updates Django's documentation for two email-related settings: EMAIL_SSL_CERTFILE and EMAIL_SSL_KEYFILE. The changes were made to clarify how these SSL certificate settings work when sending emails. Based on the reference number (Refs 35653) and the file modified (docs/ref/settings.txt), this appears to be a documentation-only change to improve clarity, with 20 lines added and 5 lines removed.\n\nKey points:\n- Documentation update only\n- Focuses on SSL certificate settings for email\n- No functional code changes\n- Part of issue/ticket #35653",
    "url": "https://github.com/django/django/commit/136a1e89278070fd100f27d9519529be8a8a8c10"
  },
  "862b7f98a02b7973848db578ff6d24ec8500fdb4": {
    "summary": "Summary:\nRestructured the GitHub Actions workflow file for labels by moving permissions configuration to the top level of the workflow instead of being nested within a job. This is a minor organizational change that improves the configuration structure without changing functionality.\n\nChanged file: `.github/workflows/labels.yml`\nType of change: Configuration restructuring",
    "url": "https://github.com/django/django/commit/862b7f98a02b7973848db578ff6d24ec8500fdb4"
  },
  "5244ecbd2259365ecd6bbf96747285a673b2ee69": {
    "summary": "This commit adds a new GitHub Actions workflow (labels.yml) that automatically labels pull requests that don't have a ticket reference in their title. The workflow was added by Sarah Boyce on January 21, 2025, and consists of 52 new lines of code with no deletions. This automation helps maintain better tracking and organization of pull requests by identifying those that need to be linked to issue tickets.",
    "url": "https://github.com/django/django/commit/5244ecbd2259365ecd6bbf96747285a673b2ee69"
  },
  "626d77e52a3f247358514bcf51c761283968099c": {
    "summary": "Summary of changes:\n- Optimized prefetching for multi-column ForwardManyToOne relationships in Django (issue #36116)\n- Simplified the implementation by using ColPairs and TupleIn functionality instead of special case handling\n- Main changes were in related_descriptors.py, with additional test coverage added\n- The optimization improves performance when prefetching foreign key relationships that use multiple columns\n- Credit given to Jacob Walls for reporting the issue\n\nThe changes appear focused on internal performance optimization while maintaining existing functionality, with significant test additions to verify the new behavior.",
    "url": "https://github.com/django/django/commit/626d77e52a3f247358514bcf51c761283968099c"
  },
  "337c641abb36b3c2501b14e1290b800831bb20ad": {
    "summary": "This commit updates the Django contributing guide by replacing a reference to \"python-memcached\" with \"pymemcache\" in the unit tests documentation. It's a follow-up to a previous commit and relates to issue #32193. The change reflects Django's switch from using python-memcached to pymemcache as the recommended memcached client library.\n\nThe change is minimal, affecting just one line in the unit tests documentation file.",
    "url": "https://github.com/django/django/commit/337c641abb36b3c2501b14e1290b800831bb20ad"
  },
  "22fc151bb86a553d84c62d7effd289356e9b6c6c": {
    "summary": "Summary:\nThis commit fixes issue #36107 in Django's PostgreSQL array handling during bulk create operations. The key change addresses a bug where the UNNEST bulk creation strategy wasn't properly handling sized arrays.\n\nSpecifically:\n- Modified the PostgreSQL compiler to better detect array fields that should opt-out of the UNNEST optimization\n- Added test models and cases to verify the fix\n- The solution continues using db_type checks rather than ArrayField instance checks to maintain compatibility with other PostgreSQL array implementations\n\nThe changes primarily affect the PostgreSQL backend compiler with supporting test additions to ensure proper functionality. This fix was prompted by a report from Claude Paroz and relates to the broader issue #35936.",
    "url": "https://github.com/django/django/commit/22fc151bb86a553d84c62d7effd289356e9b6c6c"
  },
  "f5772de69679efb54129ac1cbca3579b512778af": {
    "summary": "Summary:\nThis commit removes support for Python 3.10 and 3.11 from Django (issue #36005). The changes include:\n\n1. Major updates:\n- Removed Python 3.10 and 3.11 specific code and test configurations\n- Updated CI workflows (significant changes to schedule_tests.yml)\n- Modified documentation to reflect new Python version requirements\n\n2. Key file changes:\n- Significant cleanup in model enums (34 deletions in enums.py)\n- Test suite adjustments across multiple files\n- Updated dependency specifications in pyproject.toml and tox.ini\n\nThe commit represents a standard version support cleanup, removing compatibility code for older Python versions while maintaining support for newer versions.",
    "url": "https://github.com/django/django/commit/f5772de69679efb54129ac1cbca3579b512778af"
  },
  "61dae11df52fae71fc3050974ac459f362c9dfd7": {
    "summary": "This commit modifies Django's URL handling by replacing custom email detection logic with Django's built-in EmailValidator in the urlize function. The changes affect two files:\n\n1. django/utils/html.py: Removed 14 lines of custom email validation code and added 4 lines using EmailValidator instead\n2. tests/utils_tests/test_html.py: Updated related tests (5 additions, 9 deletions)\n\nThe change addresses issue #36017 and likely improves email validation consistency by using Django's standard validator rather than custom logic.",
    "url": "https://github.com/django/django/commit/61dae11df52fae71fc3050974ac459f362c9dfd7"
  },
  "ec8cbea91ed6362d43298caa43f3d868452f7efa": {
    "summary": "This commit fixes a test case (`BackendTestCase.test_queries_logger()`) specifically for Oracle database versions earlier than 23c. The change was made to address issue #35448, involving just a single line addition to the test file. Based on the context, it appears to be a compatibility fix to ensure the test runs correctly on older Oracle database versions.\n\nThe change is minimal (1 line added) and focused on test compatibility rather than core functionality.",
    "url": "https://github.com/django/django/commit/ec8cbea91ed6362d43298caa43f3d868452f7efa"
  },
  "c28f821c9067050ba0d099349a4dfea2b29faf99": {
    "summary": "This commit fixes a broken documentation link in a comment within Django's ASGI handler file (django/core/handlers/asgi.py). The change appears to be a simple documentation maintenance update, correcting a hyperlink reference without any functional code changes. ASGI is Django's interface for handling async web requests, so maintaining accurate documentation links is important for developers referencing the implementation details.",
    "url": "https://github.com/django/django/commit/c28f821c9067050ba0d099349a4dfea2b29faf99"
  },
  "d8f093908c504ae0dbc39d3f5231f7d7920dde37": {
    "summary": "Summary of changes:\n- Fixed formatting issues in Django's test --debug-sql output (issue #35448)\n- Added a new hook method `format_debug_sql()` in DatabaseOperations to allow database backends (especially NoSQL) to customize SQL debug output formatting\n- Modified multiple files related to SQL debugging and testing:\n  - Added the new hook in base operations\n  - Updated test runner and debug SQL formatting logic\n  - Added/updated related tests\n- Overall impact: Improves SQL debug output flexibility and formatting, particularly beneficial for non-standard database backends\n\nThe changes appear to be primarily focused on improving debugging capabilities while maintaining backward compatibility.",
    "url": "https://github.com/django/django/commit/d8f093908c504ae0dbc39d3f5231f7d7920dde37"
  },
  "98767ba2eceafa0de10c561d051d54e340c2d29b": {
    "summary": "Summary:\nFixed HTML validation issues in Django test templates. The changes affected three files:\n- Corrected invalid HTML in custom form field template\n- Updated corresponding form tests\n- Added missing HTML element in JavaScript i18n template\n\nThis appears to be a maintenance commit focused on improving test template quality and HTML validity. The small number of changes (5 additions, 4 deletions) suggests these were minor syntax corrections rather than functional changes.",
    "url": "https://github.com/django/django/commit/98767ba2eceafa0de10c561d051d54e340c2d29b"
  },
  "c41d6c9bb8262dff64fe4ab55e601bc0b269960b": {
    "summary": "Summary:\nThis commit fixes typos in Django's 5.2 release documentation (docs/releases/5.2.txt). It's a simple documentation cleanup with 3 corrections, making no functional changes to the codebase. The changes were made by Clifford Gama on January 16, 2025.",
    "url": "https://github.com/django/django/commit/c41d6c9bb8262dff64fe4ab55e601bc0b269960b"
  },
  "a7af1e2756e99c51d4a43fe85f664be1a30795fe": {
    "summary": "This commit fixes a regression in Django's URL pattern tests (issue #35090) that occurred when tests were run in reverse order. The fix modifies the `SimplifiedURLTests` class in the test suite. The regression was introduced in a previous commit (9cb1ffa). The changes are relatively small, affecting only one test file with 7 additions and 3 deletions.\n\nKey points:\n- Fixes test failures in `SimplifiedURLTests`\n- Only impacts test code, not production code\n- Addresses a specific regression issue\n- Ensures tests pass regardless of execution order",
    "url": "https://github.com/django/django/commit/a7af1e2756e99c51d4a43fe85f664be1a30795fe"
  },
  "37373d9ae969f3c3b8b1ffcec9ffb0e00ec267c3": {
    "summary": "This commit increases the default number of iterations used in Django's PBKDF2 password hasher for the upcoming Django 6.0 release. The changes affect:\n\n1. Password hashing configuration (`hashers.py`)\n2. Release documentation (`6.0.txt`)\n3. Related test cases (`test_hashers.py`)\n\nThe modification strengthens Django's default password security by increasing the computational work required for password hashing. This is a security-focused change that makes password cracking more difficult while maintaining compatibility.\n\nThe relatively small number of changes (8 additions, 7 deletions) suggests this was primarily a configuration update rather than a structural change to the hashing system.",
    "url": "https://github.com/django/django/commit/37373d9ae969f3c3b8b1ffcec9ffb0e00ec267c3"
  },
  "7bc88c3c15dcc3aa38702f298845a97618b1932b": {
    "summary": "This commit updates Django's deprecation warnings in preparation for Django 6.0. The changes involve:\n\n1. Modifying deprecation handling in `utils/deprecation.py`\n2. Adding new deprecation documentation in `docs/internals/deprecation.txt` (+8 lines)\n3. Updating related test configurations in `tests/runtests.py`\n\nThe purpose appears to be to advance the warning system for features that will be removed in Django 6.0, helping developers prepare for future compatibility changes. This is a standard practice in Django's deprecation policy to give advance notice of breaking changes.",
    "url": "https://github.com/django/django/commit/7bc88c3c15dcc3aa38702f298845a97618b1932b"
  },
  "17ae61a5d4ec75ac5e40363cc76b04c191b50d3d": {
    "summary": "This commit removes the deprecated `OS_OPEN_FLAGS` attribute from Django's `FileSystemStorage` class, as planned in the deprecation timeline (issue #35326). The changes include:\n\n1. Removing the `OS_OPEN_FLAGS` attribute and related code from `filesystem.py`\n2. Updating the Django 6.0 release notes to document this removal\n3. Removing associated test cases that are no longer needed\n\nThis appears to be a cleanup commit, removing functionality that was previously marked for deprecation. The large number of deletions (particularly in the test file) suggests this was a well-tested feature that has now been fully removed from the codebase.",
    "url": "https://github.com/django/django/commit/17ae61a5d4ec75ac5e40363cc76b04c191b50d3d"
  },
  "bc3f3031d8ae0b689d02a427f33df24a90cf54c1": {
    "summary": "This commit removes the deprecated `get_cache_name()` method from `FieldCacheMixin` in Django, as planned in the deprecation timeline (issue #35405). The changes span three files:\n\n1. Removed the method and related code from `fields/mixins.py` (-17 lines)\n2. Updated documentation in `releases/6.0.txt` to note the removal (+2 lines)\n3. Removed associated test cases from `test_mixins.py` (-21 lines)\n\nThis is a cleanup commit that removes previously deprecated functionality, likely as part of Django 6.0's release preparation.",
    "url": "https://github.com/django/django/commit/bc3f3031d8ae0b689d02a427f33df24a90cf54c1"
  },
  "85750bd2f8ed7e595aac25c7e5fd7218528a25b1": {
    "summary": "This commit removes the deprecated `CheckConstraint.check` property from Django's codebase, as per issue #35234. The changes include:\n\n1. Removing the `check` property and related code from `constraints.py` (-33 lines)\n2. Updating documentation to remove references to the deprecated property\n3. Adding a note about the removal in the Django 6.0 release notes\n4. Removing related test cases\n\nThis appears to be part of Django's planned deprecation timeline, cleaning up old code that was previously marked for removal in version 6.0. The change primarily affects how database check constraints are handled in Django's ORM.",
    "url": "https://github.com/django/django/commit/85750bd2f8ed7e595aac25c7e5fd7218528a25b1"
  },
  "4968f0012e7f97c613fcb71781c4e50874c31c15": {
    "summary": "Summary:\nRemoved the `coord_dim` setter from the `OGRGeometry` class in Django's GIS/GDAL module as part of a planned deprecation. This change affects the geometry handling code and related documentation.\n\nKey changes:\n- Removed 12 lines of code from the geometry implementation\n- Removed corresponding documentation (9 lines)\n- Removed related test cases (11 lines)\n- Added 2 lines to release notes for Django 6.0\n\nThis appears to be part of ticket #35058 and follows Django's deprecation timeline for removing previously deprecated functionality.",
    "url": "https://github.com/django/django/commit/4968f0012e7f97c613fcb71781c4e50874c31c15"
  },
  "d5fec03dad035e88494bf55194cbbbe4b20b5e5b": {
    "summary": "This commit removes support for passing positional arguments to Django's Model.save() and asave() methods, following a planned deprecation timeline (issue #35060).\n\nKey changes:\n- Removed code handling positional arguments in model save methods (major changes in db/models/base.py)\n- Updated documentation to reflect this change\n- Removed related test cases that are no longer relevant\n- Added release notes entry for Django 6.0\n\nThis is a breaking change that enforces the use of keyword arguments only when saving model instances, making the API more explicit and consistent. The large number of deletions (especially in test files) reflects the removal of now-obsolete code paths and their associated tests.",
    "url": "https://github.com/django/django/commit/d5fec03dad035e88494bf55194cbbbe4b20b5e5b"
  },
  "8d695bf510154317a5f748aa5e705124e8b06001": {
    "summary": "This commit removes the deprecated `django.contrib.gis.geoip2.GeoIP2.open()` method from Django's codebase. Here's what changed:\n\n1. Removed the `open()` method implementation from the GeoIP2 class\n2. Deleted related documentation in the GeoIP2 docs\n3. Added a note about the removal in Django 6.0 release notes\n4. Removed associated test cases\n\nThis change follows Django's deprecation timeline, cleaning up code by removing a previously deprecated method. The change affects Django's geographic information system (GIS) functionality, specifically the GeoIP2 integration.\n\nThe removal spans 4 files with 31 total line changes, mostly deletions, indicating a straightforward removal of deprecated functionality.",
    "url": "https://github.com/django/django/commit/8d695bf510154317a5f748aa5e705124e8b06001"
  },
  "4104dafdf3607c259309a0edd3bfd7169d88ac18": {
    "summary": "Summary:\nRemoved the deprecated `coords()` method from Django's GeoIP2 implementation (`django.contrib.gis.geoip2.GeoIP2`). This change:\n- Deleted the method implementation from geoip2.py\n- Removed related documentation from gis/geoip2.txt\n- Added a note about the removal in the Django 6.0 release notes\n- Removed associated test cases\n\nThis appears to be part of Django's planned deprecation timeline, cleaning up deprecated functionality for the 6.0 release.",
    "url": "https://github.com/django/django/commit/4104dafdf3607c259309a0edd3bfd7169d88ac18"
  },
  "f3a2509a54e0b5513199efca5e41a5183fc097f0": {
    "summary": "Summary:\nRemoved the `django.utils.itercompat` module as part of Django's deprecation timeline (issue #34983). The change involved:\n- Deleting the entire itercompat.py module (21 lines removed)\n- Removing associated test file (16 lines removed)\n- Adding documentation note about the removal in Django 6.0 release notes (3 lines added)\n\nThis appears to be a planned cleanup of deprecated functionality in preparation for Django 6.0.",
    "url": "https://github.com/django/django/commit/f3a2509a54e0b5513199efca5e41a5183fc097f0"
  },
  "6c120508b6445cb0d6198b4eacccd411960686d2": {
    "summary": "Summary:\nThis commit removes two deprecated methods from Django's admin interface:\n1. `ModelAdmin.log_deletion()`\n2. `LogEntryManager.log_action()`\n\nThe removal follows Django's deprecation timeline (referenced in issue #34462). The changes primarily involve:\n- Removing the deprecated code from admin models and options\n- Updating related test files to remove tests for the deprecated functionality\n- Adding documentation notes about the removal in the Django 6.0 release notes\n\nThe commit is a cleanup effort, removing code that was previously marked for deprecation, with no new functionality added.",
    "url": "https://github.com/django/django/commit/6c120508b6445cb0d6198b4eacccd411960686d2"
  },
  "817bc5800b40bcc74534de5e5176919cb826494f": {
    "summary": "Summary:\nThis commit removes two deprecated methods from Django's prefetch functionality: `Prefetch.get_current_queryset()` and `get_prefetch_queryset()`. The change is part of Django's deprecation timeline (issue #33651).\n\nKey changes:\n- Removed deprecated methods from multiple files related to model relationships and queries\n- Updated documentation in `6.0.txt` to reflect the removal\n- Removed related test cases across multiple test files\n- Made minor adjustments to `query.py` to accommodate the removal\n- Affected files primarily deal with content types, model relationships, and prefetch functionality\n\nThis appears to be a cleanup commit removing functionality that was previously marked for deprecation in Django 6.0.",
    "url": "https://github.com/django/django/commit/817bc5800b40bcc74534de5e5176919cb826494f"
  },
  "55f71b195b76f4806bd1cd928f85d9c72aa935f4": {
    "summary": "This commit removes the deprecated `ChoicesMeta` class from Django's enumeration handling system. Here's what changed:\n\n1. Removed 13 lines from `db/models/enums.py` that contained the `ChoicesMeta` implementation\n2. Added 3 lines to the Django 6.0 release notes documenting this removal\n3. Removed 11 lines of related test code from `model_enums/tests.py`\n\nThis change follows Django's deprecation timeline, cleaning up code by removing a previously deprecated feature. The removal is part of Django 6.0's updates.",
    "url": "https://github.com/django/django/commit/55f71b195b76f4806bd1cd928f85d9c72aa935f4"
  },
  "b4bc393b23dd2a222a3ca52b5d44ec33499c789f": {
    "summary": "This commit removes support for the cx_Oracle database driver in Django, as part of a planned deprecation (referenced in issue #33817). The changes include:\n\n1. Removing cx_Oracle-specific code from Oracle backend files\n2. Updating documentation to remove cx_Oracle references\n3. Removing related test cases\n4. Adding deprecation notes to the Django 6.0 release notes\n\nThe bulk of the changes involve removing code (103 deletions vs 12 additions), particularly in the Oracle backend files and tests. This appears to be part of Django's transition to using only the newer python-oracledb driver for Oracle database connections.\n\nThe commit affects multiple Oracle-related backend files, including base functionality, features, operations, and database introspection components.",
    "url": "https://github.com/django/django/commit/b4bc393b23dd2a222a3ca52b5d44ec33499c789f"
  },
  "0a0f9b4acce5534c1e1da145f80856f5e6b78768": {
    "summary": "Summary:\nThis commit removes the deprecated methods `get_joining_columns()` and `get_reverse_joining_columns()` from Django's codebase, as planned in the deprecation timeline (issue #16055). The changes span multiple files in the database models and SQL infrastructure.\n\nKey changes:\n- Removed deprecated methods from related fields and reverse related fields\n- Updated SQL datastructures to handle joining columns differently\n- Added documentation notes in the 6.0 release notes\n- Removed related test cases\n- Net result is removal of deprecated code while maintaining functionality\n\nThis appears to be part of Django's cleanup efforts for the 6.0 release, removing previously deprecated APIs.",
    "url": "https://github.com/django/django/commit/0a0f9b4acce5534c1e1da145f80856f5e6b78768"
  },
  "9a3f86e96009c1137b286f6d579b9d812a0dee69": {
    "summary": "This commit makes a significant change to Django's URL handling by:\n\n1. Changing the default scheme for URLField from 'http' to 'https'\n2. Removing the FORMS_URLFIELD_ASSUME_HTTPS setting as part of a planned deprecation\n\nThe changes span multiple files, primarily:\n- Removing configuration code in django/conf/\n- Updating field behavior in django/forms/fields.py\n- Updating documentation and tests to reflect the new default\n- Adding release notes for Django 5.0 and 6.0\n\nThis appears to be a security-focused change, making HTTPS the default protocol for URLs, which aligns with modern web security practices. The removal of the FORMS_URLFIELD_ASSUME_HTTPS setting simplifies the codebase by making HTTPS the standard behavior rather than a configurable option.\n\nThe large number of test modifications suggests thorough validation of the new default behavior.",
    "url": "https://github.com/django/django/commit/9a3f86e96009c1137b286f6d579b9d812a0dee69"
  },
  "9cb1ffa67bb0d13f86c2d4627428fcaa4513136d": {
    "summary": "This commit removes the ability to override existing URL converters using `django.urls.register_converter()` in Django, following a planned deprecation timeline (issue #35090). \n\nKey changes:\n- Removed code from `urls/converters.py` that allowed converter overrides\n- Updated documentation to remove references to this functionality\n- Modified related test cases\n- Updated Django 6.0 release notes to reflect this change\n\nThis is a breaking change that removes a previously deprecated feature, simplifying Django's URL converter registration system by preventing the override of existing converters.",
    "url": "https://github.com/django/django/commit/9cb1ffa67bb0d13f86c2d4627428fcaa4513136d"
  },
  "1e331911a88f289f52e3d81340e209d0b78abdbb": {
    "summary": "This commit removes the ability to call Django's `format_html()` function without arguments, which was previously deprecated. The change affects multiple files:\n\n- Removed deprecated code from `html.py`\n- Updated documentation to remove references to the deprecated functionality\n- Added release notes in `6.0.txt` documenting the removal\n- Updated related test cases\n\nThis is part of Django's deprecation timeline (issue #34609) and represents a breaking change that will be included in Django 6.0. The change simplifies the `format_html()` implementation by removing legacy support for no-argument calls.",
    "url": "https://github.com/django/django/commit/1e331911a88f289f52e3d81340e209d0b78abdbb"
  },
  "8081557508b197af975e0c6306d9b2af5e57d477": {
    "summary": "This commit implements a deprecation change related to issue #22569 in Django's admin interface. The main change makes the 'request' parameter required in the ModelAdmin.lookup_allowed() method.\n\nKey changes:\n- Removed deprecated code paths that handled the optional request parameter\n- Updated admin-related files to ensure request parameter is always passed\n- Added release notes in docs/releases/6.0.txt\n- Removed related test cases that were testing the deprecated behavior\n- Affected files are primarily in the admin and auth components\n\nThis appears to be part of Django's deprecation timeline, cleaning up legacy code patterns by making the request parameter mandatory rather than optional in the lookup_allowed() method.",
    "url": "https://github.com/django/django/commit/8081557508b197af975e0c6306d9b2af5e57d477"
  },
  "6b271ef21de31911f3ad7712341e3932936bd140": {
    "summary": "This commit removes the deprecated `field_cast_sql()` method from Django's DatabaseOperations class, as planned in the deprecation timeline (issue #34547). The change affects multiple files:\n\n- Removed the method from the base database operations class\n- Removed related code from model lookups\n- Removed associated test cases\n- Added a note to Django 6.0's release notes documenting the removal\n\nThis is a cleanup commit that removes previously deprecated functionality, with a total of 63 lines removed and 2 lines added across 4 files.",
    "url": "https://github.com/django/django/commit/6b271ef21de31911f3ad7712341e3932936bd140"
  },
  "ba90b76c6e5e8731b0ba9f52a3ccc0651489ef3b": {
    "summary": "Summary:\nThis commit removes deprecated transitional form renderers from Django as part of ticket #32339. The changes primarily involve:\n\n1. Removing legacy form renderer code from `forms/renderers.py` (-37 lines)\n2. Updating related documentation in `forms/renderers.txt` (-12 lines)\n3. Adding release notes in `6.0.txt` (+3 lines) to document the removal\n4. Updating test files by removing tests for the deprecated renderers (-32 lines, +1 line)\n\nThis appears to be a cleanup commit following Django's deprecation timeline, removing transitional code that was previously marked for removal in Django 6.0.",
    "url": "https://github.com/django/django/commit/ba90b76c6e5e8731b0ba9f52a3ccc0651489ef3b"
  },
  "b5a6c93a180e2c213e42f30a30bf63548a248957": {
    "summary": "Summary:\nRemoved support for positional arguments in Django's BaseConstraint class as part of a planned deprecation (issue #34355). The change primarily affected the constraints.py file, removing 22 lines of code that handled positional arguments. Related documentation and tests were also updated to reflect this change. This appears to be part of Django 6.0's updates, as indicated by changes to the 6.0.txt release notes.\n\nKey changes:\n- Removed positional argument handling from BaseConstraint\n- Updated constraint documentation\n- Removed related test cases\n- Updated Django 6.0 release notes",
    "url": "https://github.com/django/django/commit/b5a6c93a180e2c213e42f30a30bf63548a248957"
  },
  "810edfd7428e12bd640573112c6c1a024ac33da2": {
    "summary": "This commit removes version annotations (versionadded/changed) for Django 5.1 and older versions from documentation files. The changes are purely documentation-related, with 311 total deletions across 25 files and no additions.\n\nKey points:\n- All changes are deletions of version annotations\n- Affects multiple documentation areas including admin, GIS, models, testing, and auth\n- Largest changes were in sessions documentation (87 deletions) and testing tools (59 deletions)\n- Purpose appears to be documentation cleanup for outdated version information\n\nThis is a maintenance commit to keep documentation clean and current by removing historical version markers that are no longer needed.",
    "url": "https://github.com/django/django/commit/810edfd7428e12bd640573112c6c1a024ac33da2"
  },
  "9b5ad4056ccf9ff7ea548f72d28eb66c1b4f84cc": {
    "summary": "This commit adds initial (stub) release notes documentation for Django 6.0. The changes include:\n\n1. Creation of a new release notes file (`docs/releases/6.0.txt`) with 263 lines of documentation\n2. Updates to the release notes index (`docs/releases/index.txt`) to include Django 6.0\n3. A minor update to installation FAQ documentation\n\nThis is a preparatory commit that sets up the documentation structure for the upcoming Django 6.0 release. The large number of additions in the 6.0.txt file suggests it includes placeholders and structure for documenting new features, backwards incompatible changes, and deprecations that will be part of Django 6.0.",
    "url": "https://github.com/django/django/commit/9b5ad4056ccf9ff7ea548f72d28eb66c1b4f84cc"
  },
  "96700c7b378c592f0b1732302c22af2fd2c87fc6": {
    "summary": "This commit updates Django's version numbers to mark the start of development for version 6.0 pre-alpha. The changes were made to two files:\n- `django/__init__.py`: Updated version number\n- `docs/conf.py`: Updated documentation version references\n\nThis is a standard version bump commit that typically occurs after a major release to begin work on the next version.",
    "url": "https://github.com/django/django/commit/96700c7b378c592f0b1732302c22af2fd2c87fc6"
  },
  "12595092209803d108e605f35f7717e358ce5d18": {
    "summary": "This commit made minor cosmetic (formatting/style) changes to Django's 5.2 release documentation file. With 1 line added and 1 line removed, these were likely small text corrections or formatting improvements rather than content changes. The changes were made by Sarah Boyce on January 15, 2025.",
    "url": "https://github.com/django/django/commit/12595092209803d108e605f35f7717e358ce5d18"
  },
  "9e6e58bad237a80ddd5e3ab8b834cecdaad8455e": {
    "summary": "This commit removes 95 lines of empty sections from Django 5.2's release notes documentation. The change was made by Sarah Boyce to clean up the documentation by removing placeholder sections that had no content. This is a straightforward documentation maintenance commit that improves readability by eliminating unnecessary empty sections.",
    "url": "https://github.com/django/django/commit/9e6e58bad237a80ddd5e3ab8b834cecdaad8455e"
  },
  "051acc5c48f6fc5f3ad1b087e68255f1fbbef711": {
    "summary": "This commit updates the Django man page documentation for the upcoming Django 5.2 alpha release. The changes involve significant modifications to the django-admin.1 manual page file, with 116 lines added and 82 lines removed. This type of update typically includes new command options, updated syntax, and revised descriptions to reflect new features or changes in the 5.2 alpha version. The commit was made by Sarah Boyce on January 15, 2025.",
    "url": "https://github.com/django/django/commit/051acc5c48f6fc5f3ad1b087e68255f1fbbef711"
  },
  "6a7ee02f5994c65bbefe92a3da74f22326970cf9": {
    "summary": "This commit addresses issue #35521 in Django, adding functionality to override the BoundField class at multiple levels:\n\nKey changes:\n- Added ability to customize BoundField behavior through fields, forms, and renderers\n- Modified core form files (fields.py, forms.py, renderers.py) with minimal code changes\n- Extensively documented the new functionality (significant additions to docs)\n- Added comprehensive test coverage (160 new lines in test_forms.py)\n- Changes will be included in Django 5.2 release\n\nThe change provides more flexibility in form field rendering and behavior by allowing developers to specify custom BoundField classes at different levels of the form system. This was a collaborative effort with multiple contributors.\n\nThe large number of documentation changes relative to code changes suggests this is a significant API enhancement that needed thorough explanation for developers.",
    "url": "https://github.com/django/django/commit/6a7ee02f5994c65bbefe92a3da74f22326970cf9"
  },
  "0cabed9efa2c7abd1693860069f20ec5db41fcd8": {
    "summary": "Summary:\nOptimized the GeoIP2._query() method by removing redundant IP address validation when handling IPv4Address/IPv6Address objects. Since these objects are already validated during their creation, calling validate_ipv46_address() on them was unnecessary. This change simplifies the code while maintaining the same functionality.\n\nKey Change:\n- Removed unnecessary validation step for pre-validated IP address objects\n- Affects django/contrib/gis/geoip2.py file\n- Small optimization (6 additions, 5 deletions)",
    "url": "https://github.com/django/django/commit/0cabed9efa2c7abd1693860069f20ec5db41fcd8"
  },
  "b3c5830769d8a5dbf2f974da7116fe503c9454d9": {
    "summary": "Summary:\nThis commit fixes a bug (#36098) where Django's IPv6 address validation functions would crash when given non-string inputs. The issue was a regression introduced by a previous commit (ca2be77).\n\nKey changes:\n- Modified `django/utils/ipv6.py` to properly handle non-string inputs in IPv6 validation functions\n- Added test cases to verify handling of non-string values\n- Updated documentation for multiple Django versions (4.2.19, 5.0.12, 5.1.6) to document the bugfix\n- Added new test coverage in both `test_ipv6.py` and `validators/tests.py`\n\nThe fix appears to be a defensive programming improvement to prevent crashes when validators receive unexpected input types.",
    "url": "https://github.com/django/django/commit/b3c5830769d8a5dbf2f974da7116fe503c9454d9"
  },
  "1602666b79ab438930b74b576f2fa1b6bcf0377b": {
    "summary": "This commit fixes issue #36100 in Django, addressing how get_next/get_previous methods handle composite primary keys. The changes:\n\n1. Modified `django/db/models/base.py` with a one-line change to add validation for composite primary keys\n2. Updated tests in `tests/composite_pk/test_get.py` with additional test cases (10 new lines)\n\nThe fix ensures proper checking of whether all parts of a composite primary key are set before proceeding with get_next/get_previous operations. This prevents potential errors when working with models that use multiple fields as their primary key.",
    "url": "https://github.com/django/django/commit/1602666b79ab438930b74b576f2fa1b6bcf0377b"
  },
  "6cfe00ee438111af38f1e414bd01976e23b39715": {
    "summary": "This commit fixes a race condition in Django's `update_or_create()` test (issue #29499). The key changes:\n\n1. Replaced `time.sleep()` with `threading.Event()` in the test code\n2. The change was needed because using `sleep()` was unreliable - sometimes the update thread would win the race to create a row if the database backend was slow to create new connections\n3. Using `threading.Event` provides more reliable control over thread execution order, ensuring consistent test behavior\n\nThe change affects only test code (`tests/get_or_create/tests.py`) and improves test reliability without changing the actual functionality being tested.",
    "url": "https://github.com/django/django/commit/6cfe00ee438111af38f1e414bd01976e23b39715"
  },
  "de9f46d7074a948d781b31476bb12a3ed017c8c0": {
    "summary": "This commit updates Django's documentation to clarify how model validation works with composite primary keys (issue #36070). The changes are documentation-only, adding 10 new lines to explain the validation behavior for models that use multiple fields as their primary key. This helps developers better understand how Django handles validation in these scenarios.\n\nThe commit appears to be a straightforward documentation improvement, addressing a specific issue (#36070) without making any code changes.",
    "url": "https://github.com/django/django/commit/de9f46d7074a948d781b31476bb12a3ed017c8c0"
  },
  "f054045973ea767ee4e3d60723de4a2f13bf0c49": {
    "summary": "This commit updates Django's documentation to clarify how primary keys are referenced when using composite primary keys. The main change is terminology-related: instead of referring to `pk` as a field (which implies a single database column), the docs now refer to it as an attribute, since composite primary keys span multiple columns.\n\nThe changes span multiple documentation files, including field references, model instances, release notes, and composite primary key topics. This is primarily a documentation improvement to prevent confusion, referenced in issue #36070.\n\nKey point: The change emphasizes that `pk` should be thought of as an attribute rather than a field when dealing with composite primary keys.",
    "url": "https://github.com/django/django/commit/f054045973ea767ee4e3d60723de4a2f13bf0c49"
  },
  "b721f127603516c75ebda6912046ff5f0694e150": {
    "summary": "Summary:\nAdded caching functionality to Django's `urlize()` utility function (in `django.utils.html`). This change addresses issue #35998. The update includes:\n- Modifications to the core function in `html.py`\n- New test cases to verify caching behavior (37 new lines of tests)\n\nPurpose: Likely improves performance by avoiding repeated processing of the same URLs through caching of results.\n\nThe relatively small change to the core function (8 additions, 6 deletions) suggests this was a focused optimization rather than a major refactor.",
    "url": "https://github.com/django/django/commit/b721f127603516c75ebda6912046ff5f0694e150"
  },
  "d206d4c200d71c0847e7f6720d88c587e7b46843": {
    "summary": "This commit addresses issue #36051 by adding arity declarations to aggregate functions in Django. Here's what changed:\n\n1. Added arity specifications to aggregate functions in `models/aggregates.py`\n2. Updated documentation in `expressions.txt` and release notes for version 5.2\n3. Added 24 new test cases to verify the arity functionality\n\nThe commit is a follow-up to a previous change (4a66a69) and appears to be focused on improving type safety or validation of aggregate function arguments. The changes are additive only (no deletions), suggesting this is a feature enhancement rather than a bug fix.\n\nThe relatively large number of test additions (24 lines) compared to the core change (7 lines) indicates thorough testing of the new functionality.",
    "url": "https://github.com/django/django/commit/d206d4c200d71c0847e7f6720d88c587e7b46843"
  },
  "f07360e8087d3b403d1d12ff696da3138116055a": {
    "summary": "This commit fixes a regression (bug #36075) related to Multi-Table Inheritance (MTI) handling in Django. The issue specifically involves how `_non_pk_concrete_field_names` is handled.\n\nKey changes:\n- Modified field name handling in `models/base.py` and `models/options.py`\n- Updated test cases in `test_update.py` and `tests.py`\n- The regression was introduced in a previous commit (bf7b17d)\n\nThe changes appear to be focused on fixing how Django handles field names in multi-table inheritance scenarios, with most of the changes being in test files to ensure proper functionality. The relatively small number of changes to core files (base.py and options.py) suggests this is a targeted fix rather than a major feature change.\n\nCredit is given to Sage Abdullah for reporting the issue.",
    "url": "https://github.com/django/django/commit/f07360e8087d3b403d1d12ff696da3138116055a"
  },
  "161e79d277ffe8b79b15ad51cb0d23de54270202": {
    "summary": "This commit fixes a regression (bug #36075) in Django's bulk_update functionality related to primary key field handling. The changes modify how primary key fields are checked during bulk update eligibility verification.\n\nThe fix involves:\n1. Adjusting code in `query.py` to properly handle pk_fields\n2. Adding test cases in `test_bulk_update.py` to verify the fix\n\nThe regression was introduced in a previous commit (bf7b17d) and was reported by Sage Abdullah. The changes are relatively small (4 additions, 1 deletion in query.py and 4 new test lines).",
    "url": "https://github.com/django/django/commit/161e79d277ffe8b79b15ad51cb0d23de54270202"
  },
  "4bfec242b488b174f7d386ab5bbd3363751cdb93": {
    "summary": "Summary:\nThis commit fixes bug #36093 in Django, addressing a regression related to unique field checks when dealing with inherited primary keys. The fix modifies how Django validates uniqueness constraints in model inheritance scenarios. The change was made in the model base class and includes new tests to verify the fix. The bug was originally introduced in commit bf7b17d and was reported by Sage Abdullah.\n\nChanges:\n- Modified `django/db/models/base.py` (1 line changed)\n- Added 5 new test lines in `tests/model_inheritance/tests.py`",
    "url": "https://github.com/django/django/commit/4bfec242b488b174f7d386ab5bbd3363751cdb93"
  },
  "e580926d74f4d5788feac05ac1d50626936631d7": {
    "summary": "Summary:\nThis commit improves Django's documentation around composite primary keys by:\n\n1. Adding new documentation explaining how to introspect composite primary keys using `_meta.pk_fields`\n2. Clarifying the relationship between `Field.primary_key` and `CompositePrimaryKey`\n3. Creating a new documentation topic specifically for composite primary keys (`composite-primary-key.txt`)\n\nThe changes span three documentation files with significant additions (105 new lines total) and minimal deletions (10 lines), suggesting this is primarily new documentation rather than a rewrite. The commit addresses GitHub issue #36075 and was reviewed by Mariusz.",
    "url": "https://github.com/django/django/commit/e580926d74f4d5788feac05ac1d50626936631d7"
  },
  "f2a1dcaa53626ff11b921ef142b780a8fd746d32": {
    "summary": "Summary:\nA security documentation update was made to add details about CVE-2024-56374 to Django's security archive. The change only affected the security documentation file (security.txt), adding 11 new lines with no deletions, suggesting this was purely an addition of new security vulnerability information.\n\nThis appears to be standard security documentation maintenance to keep Django's vulnerability records up to date.",
    "url": "https://github.com/django/django/commit/f2a1dcaa53626ff11b921ef142b780a8fd746d32"
  },
  "3b46bea90933b8fb24f4ddfa8a3943032a5a370e": {
    "summary": "This commit creates initial documentation for Django version 5.1.6 by:\n1. Adding a new release notes file (5.1.6.txt) with 12 lines of placeholder content\n2. Adding a reference to 5.1.6 in the release notes index\n\nThis appears to be standard preparation for an upcoming Django point release, setting up the documentation structure before the actual release changes are documented.",
    "url": "https://github.com/django/django/commit/3b46bea90933b8fb24f4ddfa8a3943032a5a370e"
  },
  "ca2be7724e1244a4cb723de40a070f873c6e94bf": {
    "summary": "This commit addresses CVE-2024-56374, a security vulnerability related to IPv6 validation in Django that could lead to potential Denial of Service (DoS) attacks.\n\nKey changes:\n- Modified IPv6 validation logic in `django/utils/ipv6.py` with significant additions (16 lines)\n- Updated form fields and model fields to implement the security fix\n- Added extensive test coverage (60 new test lines across two test files)\n- Added documentation for the security fix in release notes for versions 4.2.18, 5.0.11, and 5.1.5\n- Updated form fields documentation to reflect the changes\n\nThe fix was contributed by Michael Manfre and co-authored by Natalia, with credit given to Saravana Kumar for reporting and Sarah Boyce and Mariusz Felisiak for reviewing.\n\nThe changes appear to focus on strengthening input validation for IPv6 addresses to prevent potential DoS attacks through malformed input.",
    "url": "https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf"
  },
  "9a2dd9789a2edeed7344a8ec0d17142ad27443a1": {
    "summary": "This commit makes minor formatting or wording improvements (\"cosmetic edits\") to Django's 5.1.5 release notes documentation. The changes are small in scope, affecting only 4 lines in the release notes file (2 additions, 2 deletions), likely fixing typos, improving clarity, or adjusting formatting without changing the substantive content.",
    "url": "https://github.com/django/django/commit/9a2dd9789a2edeed7344a8ec0d17142ad27443a1"
  },
  "0a341125d1f6ea8e5e80522a98725f906fb08350": {
    "summary": "This commit removes the deprecated `prefix_chars` argument from `ArgumentParser.add_argument_group()` in Django's dbshell command. The change was made because the argument was deprecated in CPython (as referenced in the linked commit). This is a maintenance update to remove unnecessary code and keep up with Python's deprecations.\n\nIssue reference: #35844",
    "url": "https://github.com/django/django/commit/0a341125d1f6ea8e5e80522a98725f906fb08350"
  },
  "23c6effac0c39669e17904165c9762f24b010cc5": {
    "summary": "This commit fixes issue #36087 in Django, adding support for password reset functionality on custom user models that use composite primary keys (multiple fields that together form the primary key).\n\nKey changes:\n- Modified auth forms and views to handle composite primary keys\n- Added test cases and models to verify the functionality\n- Most changes were in test files (33 out of 41 total lines changed)\n- Primary changes were in auth_tests with new test models and test cases\n\nThe fix appears to be relatively small in the core code (forms.py and views.py) but required significant testing infrastructure to verify the solution works correctly with composite primary keys.",
    "url": "https://github.com/django/django/commit/23c6effac0c39669e17904165c9762f24b010cc5"
  },
  "d83fb782d33aa7aaa1b2c995c648a59eddb46047": {
    "summary": "Summary:\nThis commit addresses issue #36092 in Django by adding validation to prevent the use of non-local fields in composite primary keys. The change involves adding checks in the model base class (base.py) and corresponding test cases. The validation ensures that only fields directly defined on the model can be used in composite primary keys, improving data integrity and preventing potential issues with related fields.\n\nKey Changes:\n- Added validation logic in django/db/models/base.py\n- Created new test cases in tests/composite_pk/test_checks.py to verify the behavior",
    "url": "https://github.com/django/django/commit/d83fb782d33aa7aaa1b2c995c648a59eddb46047"
  },
  "bf7b17d16d3978b2e1cee4a0f7ce8840bd1a8dc4": {
    "summary": "This commit addresses issue #36075 in Django, making a consistent change in how primary key fields are referenced across multiple files. The main change involves using the `field` attribute directly in `pk_fields` instead of checking `field.primary_key`.\n\nKey changes:\n- Modified core model files (base.py, options.py, query.py) to update primary key field handling\n- Updated composite primary key tests and fixtures\n- Added significant test coverage (38 new lines in test_update.py)\n\nThe change appears to be a refactoring to improve consistency in how Django handles primary key fields, particularly in the context of composite primary keys. The large number of test additions suggests this was a careful change to ensure existing functionality wasn't broken.",
    "url": "https://github.com/django/django/commit/bf7b17d16d3978b2e1cee4a0f7ce8840bd1a8dc4"
  },
  "d66137b39b1503ca3d4d4fac687251adbc845068": {
    "summary": "This commit updates Django's documentation regarding Model.save() behavior. It removes outdated information about how empty strings are handled for primary key values during UPDATE operations. The change reflects that empty strings are no longer treated as a special case since a previous commit (c2ba59fc). This was done to fix issue #36077 and ensure the documentation accurately reflects the current behavior.\n\nThe change only affects documentation (instances.txt) with 2 lines added and 3 removed.",
    "url": "https://github.com/django/django/commit/d66137b39b1503ca3d4d4fac687251adbc845068"
  },
  "76a0b6aa3aa7bd62c2a9ba11306c906047ee7ada": {
    "summary": "Summary:\nThis commit fixes Oracle database support for OuterRef with CompositePrimaryKey by adding tuple comparison handling. The change was necessary because Oracle doesn't natively support tuple comparisons, requiring explicit right-hand-side sanitization in the as_oracle implementation. The fix addresses issue #36050 and modifies the tuple_lookups.py file with 10 new lines of code.\n\nKey points:\n- Problem: Oracle compatibility issue with OuterRef and CompositePrimaryKey\n- Solution: Added right-hand-side sanitization for tuple comparisons\n- Impact: Improves Oracle database support in Django",
    "url": "https://github.com/django/django/commit/76a0b6aa3aa7bd62c2a9ba11306c906047ee7ada"
  },
  "9e552015556661d183a999078a9e846200ef6765": {
    "summary": "This commit fixes a bug (#36086) related to Django's GeneratedField when used with non-AutoField primary keys. The issue caused:\n\n1. Crashes when using GeneratedField with non-integer primary keys\n2. Incorrect value assignments on certain databases (MySQL, SQLite <3.35, Oracle) when they couldn't return columns from INSERT statements\n\nThe fix modifies the SQL compiler to properly handle last_insert_id retrieval only when appropriate, rather than attempting it for all GeneratedField cases. Test cases were added to verify the fix.\n\nThe changes span three files, primarily focusing on compiler.py logic with supporting test additions to prevent regression.",
    "url": "https://github.com/django/django/commit/9e552015556661d183a999078a9e846200ef6765"
  },
  "20eb4bca7de945d8858d1354a8c624406c0b90bd": {
    "summary": "Summary:\nThis commit modifies test code related to AutoField usage in composite primary keys in Django's migration system. The change adjusts test expectations to acknowledge that while AutoFields can technically be part of composite primary keys, this isn't a fully supported feature yet. The commit references two issues: #373 and #35957, with the latter suggesting this functionality needs further review and proper implementation.\n\nKey points:\n- Modified test file: tests/migrations/test_operations.py\n- Adjusted test cases for AutoField in composite primary keys\n- Marks this as a temporary adjustment pending proper feature support\n- Small scope: 7 additions, 4 deletions",
    "url": "https://github.com/django/django/commit/20eb4bca7de945d8858d1354a8c624406c0b90bd"
  },
  "bfcb34076e3c0c04cb5080a37d93225444ac1b82": {
    "summary": "Summary:\nRemoved dead code from Django's SQLInsertCompiler that handled composite primary keys containing AutoFields. This code was never actually used since Django doesn't support composite primary keys with AutoFields (issue #35957). Additionally, the removed code had a bug assuming AutoFields would always be first in returning_fields. The change simplifies the codebase by removing unused and potentially problematic logic.\n\nKey points:\n- Removed: 15 lines of unused code\n- File affected: django/db/models/sql/compiler.py\n- Related issues: #373, #35957\n- Purpose: Code cleanup",
    "url": "https://github.com/django/django/commit/bfcb34076e3c0c04cb5080a37d93225444ac1b82"
  },
  "8bee7fa45cd7bfe70b68784314e994e2d193fd70": {
    "summary": "This commit adds support for OuterRef in CompositePrimaryKey lookups in Django, fixing issue #36050. The changes were made across two files:\n\n1. Modified `tuple_lookups.py` to handle OuterRef expressions in composite primary key comparisons\n2. Added extensive test coverage in `test_filter.py` to verify the new functionality\n\nThis enhancement allows for more complex queries involving composite primary keys in subqueries, particularly when using OuterRef for outer references in related lookups.\n\nThe significant test additions (50 new lines) suggest this was a substantial feature addition that required comprehensive testing to ensure proper functionality.",
    "url": "https://github.com/django/django/commit/8bee7fa45cd7bfe70b68784314e994e2d193fd70"
  },
  "97ee8b82c2c99bf352df5359bb24a42ea78585b8": {
    "summary": "Summary:\nThis commit adds functionality to render URLField values as clickable links in the Django admin interface (fixing issue #36032). The changes primarily affect the admin utilities and include:\n\n- Modified admin utils to handle URL field rendering\n- Added test cases to verify URL field display behavior\n- Updated documentation for Django 5.2 to reflect this feature\n- Made related adjustments to test models and admin configurations\n\nThe change improves usability by making URL fields interactive rather than plain text in the admin interface.",
    "url": "https://github.com/django/django/commit/97ee8b82c2c99bf352df5359bb24a42ea78585b8"
  },
  "585160586336f3bcd7b694f53cf10db73c56981c": {
    "summary": "Summary:\nThis commit fixes issue #36064 in Django, optimizing how model instances with composite primary keys and default values are created. The change eliminates an unnecessary UPDATE operation that was occurring during instance creation. The fix primarily modifies the model base class and includes additional test coverage for composite primary key scenarios.\n\nKey changes:\n- Modified instance creation logic in `django/db/models/base.py`\n- Updated tenant models test file\n- Added new test cases to verify the fix\n- Improves performance by avoiding redundant database operations\n\nThe change appears to be a performance optimization for a specific but common use case in Django's ORM.",
    "url": "https://github.com/django/django/commit/585160586336f3bcd7b694f53cf10db73c56981c"
  },
  "8287fd49151b1b99045efbf3de8ef911d63c5f45": {
    "summary": "Summary:\nAdded test coverage for Django issue #36064 to verify that models with falsey primary key defaults (like 0 or empty string) properly skip unnecessary update queries during save operations. The changes include:\n\n- Added new test model definitions (8 lines) in basic/models.py\n- Added corresponding test cases (10 lines) in basic/tests.py\n\nThis test coverage validates behavior introduced in a previous commit (9fa4d07) related to primary key handling.",
    "url": "https://github.com/django/django/commit/8287fd49151b1b99045efbf3de8ef911d63c5f45"
  },
  "9fa4d07ce0729850661a31a6b37c6b48f13d2266": {
    "summary": "This commit introduces a new method `Model.has_db_default()` in Django to better handle database default value checks. Here's the key points:\n\n1. Purpose: Simplifies checking for NOT_PROVIDED default values by encapsulating this common check into a single method\n2. Design Choice: Implemented as a method rather than a property to maintain consistency with the existing `Field.has_default()`\n3. Impact: Affects multiple database-related files (schema, migrations, models) across different backends (MySQL, SQLite3)\n4. Scope: Primarily refactoring existing code to use the new method, reducing redundant NOT_PROVIDED checks\n\nThe change improves code clarity and maintainability by centralizing a common check pattern into a single method.",
    "url": "https://github.com/django/django/commit/9fa4d07ce0729850661a31a6b37c6b48f13d2266"
  },
  "0fb51ec5a0ab445aa178761f80f7415ac8098998": {
    "summary": "This commit addresses GitHub issue #36068 in Django, making a change to how bulk_create() handles composite primary keys.\n\nThe change:\n- Modifies error handling in bulk_create() when update_fields is used with composite primary keys\n- Raises a ValueError in this scenario instead of potentially allowing invalid operations\n- Updates tests to verify this behavior\n\nThe main fix is in django/db/models/query.py with minimal code changes (1 line changed), while most changes are in the test file (16 lines added) to ensure proper error handling.\n\nThis appears to be a defensive programming change to prevent misuse of bulk_create() with composite primary keys in update operations.",
    "url": "https://github.com/django/django/commit/0fb51ec5a0ab445aa178761f80f7415ac8098998"
  },
  "af6336f2c82fd6e5a0e42a7650a3a132c3362a0f": {
    "summary": "Summary:\nThis commit fixes issue #36074 in Django, addressing how composite primary key fields are handled during model save() operations. The change excludes composite primary key fields from being included in update operations. The fix modifies the model base class and adds related test coverage, with minimal code changes (2 additions/1 deletion in base.py, 6 additions/1 deletion in tests).\n\nKey points:\n- Problem: Issue with composite primary key fields during save() updates\n- Solution: Excluded these fields from update operations\n- Impact: Improves handling of models with composite primary keys\n- Verification: Added test coverage to ensure proper behavior",
    "url": "https://github.com/django/django/commit/af6336f2c82fd6e5a0e42a7650a3a132c3362a0f"
  },
  "fc28550fe4e0582952993976edc62971bd5345a8": {
    "summary": "This commit adds automatic model imports to Django's shell management command (issue #35515). The change allows Django models to be automatically imported when launching the shell, eliminating the need for manual imports.\n\nKey changes:\n- Major updates to `shell.py` command implementation (+79/-5 lines)\n- Added new documentation in `custom-shell.txt` (+57 lines)\n- Extensive test coverage additions in `tests/shell/tests.py` (+190/-8 lines)\n- Updated various documentation files to reflect the new functionality\n- Added release notes for Django 5.2\n\nThis was a Google Summer of Code 2024 project by Salvo Polizzi, mentored by Bhuvnesh Sharma and Adam Johnson. The feature improves developer experience by making Django models immediately available in the shell environment.",
    "url": "https://github.com/django/django/commit/fc28550fe4e0582952993976edc62971bd5345a8"
  },
  "8c118c0e00846091c261b97dbed9a5b89ceb79bf": {
    "summary": "This commit addresses issue #35940 in Django, focusing on improving the SelectFilter widget's button behavior in the admin interface. Here's the key changes:\n\n1. Main Fix: Modified SelectFilter2.js to properly disable add/remove buttons when appropriate (when no items are available to move)\n\n2. CSS Updates:\n- Updated styling in multiple CSS files (widgets.css, responsive.css, rtl.css) to handle disabled button states\n- Changes maintain consistency across RTL (right-to-left) layouts\n\n3. Testing:\n- Significantly expanded test coverage (68 additions in admin_widgets/tests.py)\n- Modified existing admin tests for better validation of the new behavior\n\nThe changes primarily focus on UI/UX improvement by preventing users from clicking add/remove buttons when no action is possible, making the interface more intuitive and preventing potential errors.",
    "url": "https://github.com/django/django/commit/8c118c0e00846091c261b97dbed9a5b89ceb79bf"
  },
  "a9c79b462923ce366101db1b5a3fff3d1dad870c": {
    "summary": "This commit fixes issue #36063 in Django, addressing how FileFields behave in the admin interface's list display. The main change makes FileFields clickable and navigable to their object's admin change page when included in list_display_links.\n\nKey changes:\n- Modified admin template tags and utils to handle FileField linking\n- Added test cases to verify the new behavior\n- Updated admin changelist functionality to support this feature\n\nThe changes span across admin components and test files, with most modifications focused on template handling and testing. This improves the admin interface's usability by making FileFields behave consistently with other linked fields in list views.",
    "url": "https://github.com/django/django/commit/a9c79b462923ce366101db1b5a3fff3d1dad870c"
  },
  "6a1a9c0eade674780060cf8af5f5b3375156cdd5": {
    "summary": "This commit addresses issue #36062 in Django, focusing on adding support for serializing Composite Primary Keys. Here's the key changes:\n\n1. Main functionality:\n- Added serialization handling for CompositePrimaryKeys in the composite.py file (+25 lines)\n- Modified XML serializer to handle composite keys\n- Added test fixtures and expanded test coverage (+42 lines in tests.py)\n\n2. Testing:\n- Created new tenant-related test models and fixtures\n- Added comprehensive tests to verify correct serialization behavior\n- Updated existing test models to include composite key scenarios\n\nThe changes primarily focus on ensuring that models with composite primary keys can be properly serialized and deserialized, with most of the new code being tests and supporting test infrastructure to verify the functionality.",
    "url": "https://github.com/django/django/commit/6a1a9c0eade674780060cf8af5f5b3375156cdd5"
  },
  "15e207ce80581ec64bd790c37cce1bc07d01a744": {
    "summary": "Summary:\nThis commit updates Django's documentation to remove outdated references to the #django IRC channel and replaces some of them with links to the Django Discord server. The changes span across 7 documentation files, primarily in tutorial, FAQ, and contributing guides.\n\nKey changes:\n- Removed IRC channel references from help documentation and release process docs\n- Updated community communication channels in contributing guides\n- Modified tutorial and \"what's next\" sections to reflect current communication platforms\n- Issue #35999 was addressed by this update\n\nThis appears to be a maintenance commit to keep documentation current with Django's modern community communication channels.",
    "url": "https://github.com/django/django/commit/15e207ce80581ec64bd790c37cce1bc07d01a744"
  },
  "007f14365988bd94c35dc34959c1ef4c2407c86f": {
    "summary": "This commit updates the FAQ documentation in Django to clarify the language around supported Python versions. Made by Carlton Gibson on January 7, 2025, it modifies only the installation FAQ document (`docs/faq/install.txt`), replacing 5 lines with new text. The commit message suggests that the wording was made more definitive or explicit regarding which Python versions are officially supported by Django.\n\nThis appears to be a documentation-only change focused on providing clearer guidance to users about Python version compatibility.",
    "url": "https://github.com/django/django/commit/007f14365988bd94c35dc34959c1ef4c2407c86f"
  },
  "42e8f264ce55710056b0033682ec6fd662a25b29": {
    "summary": "Summary:\nFixed a bug (#36065) in Django that affected ordering by expressions when referencing composite primary keys. The fix involved:\n\n1. Modifying expression handling in `expressions.py` (+10 lines)\n2. Small adjustment to SQL compiler logic (-2, +1 lines)\n3. Added test cases to verify the fix (+15 lines)\n\nThe issue was reported by Jacob Walls, who also provided test cases, and reviewed by Csirmaz Bendeg\u00faz. The changes ensure proper ordering functionality when working with models that have composite primary keys.",
    "url": "https://github.com/django/django/commit/42e8f264ce55710056b0033682ec6fd662a25b29"
  },
  "7617d5be94a6e348d5ddf4644985b24235822034": {
    "summary": "Summary:\nThis commit reorganizes test code for composite primary key functionality in Django, specifically related to issue #36065. The changes:\n\n1. Moved order by tests from `test_filter.py` (24 lines removed) to a new dedicated file `test_order_by.py` (57 lines added)\n2. The extraction and expansion of tests suggests better organization and possibly more comprehensive testing of composite primary key ordering functionality\n\nThis is primarily a code organization change to improve test structure, separating ordering tests from filtering tests.",
    "url": "https://github.com/django/django/commit/7617d5be94a6e348d5ddf4644985b24235822034"
  },
  "c068f000be7c486abb8b17fc565383679d7d4f82": {
    "summary": "This commit fixes issue #36014 in Django by updating the EmailValidator to support international domain names (IDNs) in email addresses. The changes primarily affect the validator implementation in `validators.py`, with corresponding test updates.\n\nKey changes:\n- Modified EmailValidator to handle international domains correctly\n- Added new test cases to verify IDN support\n- Updated existing email field tests\n\nThe commit improves Django's email validation to be more inclusive of non-ASCII domain names while maintaining proper validation standards. The relatively small change (23 additions, 14 deletions) appears to be a focused fix for this specific internationalization issue.",
    "url": "https://github.com/django/django/commit/c068f000be7c486abb8b17fc565383679d7d4f82"
  },
  "53e21eebf22bc05c7fa30820b453b7f345b7af40": {
    "summary": "This commit adds placeholder (stub) release notes for three Django versions: 5.1.5, 5.0.11, and 4.2.18. The changes involve:\n\n- Creating new release note files for versions 4.2.18 and 5.0.11\n- Updating existing release notes for version 5.1.5\n- Adding references to these releases in the release notes index\n\nThis is preparatory documentation work for upcoming Django releases, ensuring release documentation is in place before the actual releases occur.",
    "url": "https://github.com/django/django/commit/53e21eebf22bc05c7fa30820b453b7f345b7af40"
  },
  "095f5db060b88f5ef248d6a656b9059a54d4f277": {
    "summary": "This commit fixes a typographical error in Django's Tutorial 5 documentation (tutorial05.txt). The change is minimal, with one line removed and one line added. Made by Clifford Gama on January 7, 2025, this is a simple documentation correction to improve accuracy.",
    "url": "https://github.com/django/django/commit/095f5db060b88f5ef248d6a656b9059a54d4f277"
  },
  "470e5545e56e8510f9b9d39a96d7094fedd9c45a": {
    "summary": "This commit addresses issue #36042 in Django, adding validation to prevent composite expressions from being used in aggregates. Here's the key changes:\n\n1. Added error handling that raises a ValueError when attempting to use composite expressions in aggregates\n2. Updated related documentation in multiple files, including expression reference and Django 5.2 release notes\n3. Modified composite primary key documentation\n4. Added and updated tests for composite primary key aggregation and filtering\n\nThe main purpose appears to be preventing incorrect usage of composite expressions in aggregates, which could lead to errors or unexpected behavior. The changes span both implementation code and documentation, with minimal deletions suggesting this is primarily an addition of new validation logic.",
    "url": "https://github.com/django/django/commit/470e5545e56e8510f9b9d39a96d7094fedd9c45a"
  },
  "6eec703667505d87d1354323548943c8d546c5a2": {
    "summary": "This commit fixes issue #36042 in Django, addressing a problem with CompositePrimaryKey handling in database queries. The changes:\n\n1. Added validation to raise a ValueError when CompositePrimaryKey is incorrectly used as a right-hand side (rhs) value in queries\n2. Modified lookup handling in models/lookups.py with 5 new lines of code\n3. Added 21 lines of new test cases to verify the fix\n\nThe main purpose was to improve error handling by providing clearer feedback when developers incorrectly use composite primary keys in query comparisons, rather than allowing invalid operations to proceed silently.",
    "url": "https://github.com/django/django/commit/6eec703667505d87d1354323548943c8d546c5a2"
  },
  "8914b571eb5f93722b9741b1da9eb69347271b11": {
    "summary": "This commit fixes issue #36023 by improving how Django handles control characters in Content-Disposition headers. Here's the key changes:\n\n1. Implements stricter validation for filename parameters in Content-Disposition headers according to RFC6266 and RFC9110 specifications\n2. Adds regex validation to ensure filenames only contain allowed characters (horizontal tabs, spaces, and characters in range 0x21-0x7E)\n3. Properly handles special characters like quotes and backslashes by requiring them to be escaped\n4. Forces filenames with control characters to use the percent-encoded `filename*=` format instead of the simple `filename=` format\n\nThe changes affect `django/utils/http.py` and adds a test case in `tests/utils_tests/test_http.py`. This makes Django's handling of Content-Disposition headers more secure and spec-compliant.",
    "url": "https://github.com/django/django/commit/8914b571eb5f93722b9741b1da9eb69347271b11"
  },
  "40d5516385448a73426aad396778f369a363eda9": {
    "summary": "This commit adds a new `JSONArray` function to Django's database models functionality, addressing issue #35718. The changes include:\n\n1. Implementation of the `JSONArray` function in `json.py` (60 lines)\n2. Comprehensive test suite in `test_json_array.py` (177 lines)\n3. Documentation updates:\n   - Added function reference in database-functions.txt\n   - Updated release notes for Django 5.2\n   - Updated function imports in `__init__.py`\n\nThe `JSONArray` function appears to be a new database-level function for handling JSON array operations. The extensive test suite suggests thorough validation of the new functionality. This was a collaborative effort between John Parton, Sarah Boyce, and Mariusz Felisiak.",
    "url": "https://github.com/django/django/commit/40d5516385448a73426aad396778f369a363eda9"
  },
  "d734f1651ccc0a74325f7b55f7eecc68edef6453": {
    "summary": "This commit deprecates the ordering parameter in Django's contrib.postgres aggregates in favor of order_by. The change aims to align the argument naming with SQL standards that are already used in Window.order_by.\n\nKey changes:\n- Deprecated the 'ordering' parameter in postgres aggregates\n- Added 'order_by' as the new standard parameter\n- Updated documentation to reflect the deprecation\n- Added new test cases to verify the changes\n- Added deprecation warnings in Django 5.2\n\nThe change affects multiple files, with significant updates to the aggregates mixins, tests, and documentation. This appears to be part of a larger effort to standardize Django's SQL-related parameter naming conventions.\n\nThe commit references issue #35444 and prepares for future support of ordering in the Aggregate class.",
    "url": "https://github.com/django/django/commit/d734f1651ccc0a74325f7b55f7eecc68edef6453"
  },
  "46b3e7dd8cc1792a40bb8b4d0c267f3d1ceef68c": {
    "summary": "This commit addresses issue #36048 by changing how Django handles validation errors for composite primary keys. The key changes:\n\n1. Replaced NotSupportedError with ValueError for composite primary key sanity checks\n2. The rationale is that these validations are not database backend-specific\n3. Modified multiple files including aggregates, related lookups, and corresponding test files\n4. Changes are minimal (mostly 1-2 line changes per file) except for the tuple lookups test file which had more substantial updates\n\nThis is primarily a consistency improvement in error handling, making the code more logically organized by using ValueError for validation issues that are framework-level rather than backend-specific.",
    "url": "https://github.com/django/django/commit/46b3e7dd8cc1792a40bb8b4d0c267f3d1ceef68c"
  },
  "51df0dff3c4f28016185a9e876ee5b3420712f99": {
    "summary": "Summary:\nThis commit fixes issue #36057 by updating Django's test runner to properly handle chained exceptions when using the `--pdb` debugger option on Python 3.13 and newer versions. The change modifies `django/test/runner.py`, making 5 additions and 2 deletions to ensure compatibility with Python's updated exception handling behavior.\n\nKey Points:\n- Fixes debugger functionality for chained exceptions\n- Targets Python 3.13+ compatibility\n- Modifies test runner code\n- Relatively small change (7 lines modified)",
    "url": "https://github.com/django/django/commit/51df0dff3c4f28016185a9e876ee5b3420712f99"
  },
  "ec0e784f91b551c654f0962431cc31091926792d": {
    "summary": "Summary:\nMade OutputWrapper in Django's management commands a virtual subclass of TextIOBase to properly handle file operations. This fixes issue #36056 where calling flush() on a closed OutputWrapper would raise an ignored ValueError. The change includes adding tests to verify the fix.\n\nKey Changes:\n- Modified django/core/management/base.py to make OutputWrapper inherit from TextIOBase\n- Added test coverage in tests/user_commands/tests.py to validate the behavior\n- Specifically addresses the \"I/O operation on closed file\" ValueError that was previously being ignored\n\nThis appears to be a bug fix that improves file handling consistency in Django's command-line interface.",
    "url": "https://github.com/django/django/commit/ec0e784f91b551c654f0962431cc31091926792d"
  },
  "a4d3f2535ec1f490c26ecf6c24b95105cd888dd9": {
    "summary": "This commit by Tim Graham on January 3, 2025, removed a single stray comment from the `ArrayField.check()` method in Django's PostgreSQL array field implementation (`django/contrib/postgres/fields/array.py`). It's a simple code cleanup change that removes unnecessary documentation without affecting functionality.",
    "url": "https://github.com/django/django/commit/a4d3f2535ec1f490c26ecf6c24b95105cd888dd9"
  },
  "a8e4fd11efc65832e7d9f5582d3868c5c8bd8d88": {
    "summary": "This commit fixes issue #36052 in Django, adding support for composite primary keys in the `inspectdb` management command. The changes primarily affect the database inspection functionality (`inspectdb.py`) and its associated tests.\n\nThe main changes involve modifying how Django handles tables with multiple primary key columns when reverse engineering database schemas. The relatively small number of changes (9 additions, 10 deletions across two files) suggests this was a focused fix to address a specific limitation in the existing implementation.\n\nKey points:\n- Adds composite primary key support to `inspectdb`\n- Modifies both main code and test files\n- References issue #36052\n- Author: Jacob Walls",
    "url": "https://github.com/django/django/commit/a8e4fd11efc65832e7d9f5582d3868c5c8bd8d88"
  },
  "ddefc3fed1cf1f0d3fab455babbbc009b76e4196": {
    "summary": "This commit adds functionality to Django's `execute_sql` method to directly return row counts from database operations. The change addresses GitHub issue #35918.\n\nKey changes:\n- Modified SQL compiler code to handle row count returns\n- Updated query handling in multiple Django database-related files\n- Adjusted SQL constants and subquery handling\n\nThe main purpose appears to be improving efficiency by allowing direct access to affected row counts from SQL operations, rather than requiring additional processing to obtain this information.\n\nThe changes span across Django's database layer, primarily affecting query execution and SQL compilation components.",
    "url": "https://github.com/django/django/commit/ddefc3fed1cf1f0d3fab455babbbc009b76e4196"
  },
  "d97cacc2aedf948f7c557d0231e3b410905678b2": {
    "summary": "This commit updates Django's documentation for class-based views, specifically clarifying the behavior of the View.setup() method. The change adds documentation to explain that setup() is responsible for setting three important attributes: request, args, and kwargs. This was done to address GitHub issue #36026 and improve clarity for developers. The change only affects the documentation file (base.txt) with 5 new lines added and no deletions.",
    "url": "https://github.com/django/django/commit/d97cacc2aedf948f7c557d0231e3b410905678b2"
  },
  "083e6239538cbc34ae9781c2e70a8a8dbfcf2817": {
    "summary": "This commit addresses issue #35414 in Django by modifying the AsyncRequestFactory to use default headers. The changes span two files:\n\n1. `django/test/client.py`: Added default headers support to the async request handling\n2. `tests/test_client/tests.py`: Added 13 new lines of tests to verify the default headers functionality\n\nThe change ensures consistent header behavior between sync and async request factories in Django's testing framework. This appears to be a bug fix that aligns the async implementation with existing synchronous behavior.",
    "url": "https://github.com/django/django/commit/083e6239538cbc34ae9781c2e70a8a8dbfcf2817"
  },
  "12f4f95405c7857cbf2f4bf4d0261154aac31676": {
    "summary": "Summary:\nFixed a test failure in Django's FileFieldStorageTests when running on bcachefs filesystem. The issue arose because bcachefs has a PC_NAME_MAX value of 512, which exceeded the file field's max_length. The fix likely involved adjusting the test's max_length parameter to accommodate bcachefs's larger filename length limit.\n\nKey Points:\n- Fixes GitHub issue #35740\n- Affects file storage testing on bcachefs filesystem\n- Single file modified with one line changed\n- Issue was due to filesystem-specific filename length limitations",
    "url": "https://github.com/django/django/commit/12f4f95405c7857cbf2f4bf4d0261154aac31676"
  },
  "c3a681659c4a982101ffee0d3ef205ac5b310e17": {
    "summary": "Summary:\nThis commit fixes issue #36029 in Django, addressing how FilteredRelation handles implicit exact lookups during condition depth checks. The changes modify the query handling logic in `django/db/models/sql/query.py` and add new test cases to verify the fix. The update appears to be a bug fix that ensures proper handling of exact lookup conditions in filtered relations.\n\nKey Changes:\n- Modified query handling logic (6 lines changed)\n- Added 13 new test cases to validate the fix\n- No functionality was removed (only modifications and additions)",
    "url": "https://github.com/django/django/commit/c3a681659c4a982101ffee0d3ef205ac5b310e17"
  },
  "45dc2aaa2a9dfe6d7d706f5e9f6757318423602e": {
    "summary": "Summary:\nAdded a new test case to verify QuerySet.delete() behavior when EmptyResultSet is raised. The change only affects the test suite (tests/delete/tests.py) with 9 new lines added. This commit appears to be improving test coverage by handling an edge case that wasn't previously tested.\n\nThe commit was made by Tim Graham, a Django core developer, ensuring proper error handling is tested when attempting to delete an empty result set.",
    "url": "https://github.com/django/django/commit/45dc2aaa2a9dfe6d7d706f5e9f6757318423602e"
  },
  "987854ba44b497b195536199f8f6d1dc440a43ca": {
    "summary": "Summary:\nThis commit adds accessibility improvements to Django forms by implementing the `aria-describedby` attribute for form fields with errors. The change addresses GitHub issue #32819.\n\nKey changes:\n- Modified form field handling in `boundfield.py` to support the new ARIA attribute\n- Updated form API documentation extensively (40 additions)\n- Added release notes for Django 5.2\n- Significantly expanded test coverage (114 new test lines)\n\nPurpose: To improve form accessibility for screen readers by properly linking error messages to their corresponding form fields using ARIA attributes.",
    "url": "https://github.com/django/django/commit/987854ba44b497b195536199f8f6d1dc440a43ca"
  },
  "53df2ee7a42cf965126839b59308e49b58007669": {
    "summary": "This commit removes the current year from Django's Python license file to match a similar change made in the CPython repository. The change was made to mirror CPython's commit 91f4908, which had previously removed the year from their license. It's a simple update involving one line change in the LICENSE.python file.",
    "url": "https://github.com/django/django/commit/53df2ee7a42cf965126839b59308e49b58007669"
  },
  "ad385ae163da2b1c558f62c0415db5aa03227587": {
    "summary": "This commit fixes documentation inconsistencies regarding Django's default primary key type. The change:\n\n1. Updates references to show that `BigAutoField` (not `AutoField`) is the default primary key type\n2. Removes duplicate type information by referring to the existing definition in models.txt\n3. Fixes issue #36037\n\nThe change affects two documentation files and is primarily about accuracy and reducing redundancy in the documentation, ensuring consistent information about Django's default primary key type across the docs.",
    "url": "https://github.com/django/django/commit/ad385ae163da2b1c558f62c0415db5aa03227587"
  },
  "82b913cd6c95e9d5161f9fec599538c46571a72e": {
    "summary": "This commit fixes a typo in Django's related_descriptors.py file, which is part of the database models system. The change was made by Jacob Walls and involves a single line modification (1 addition, 1 deletion). While the specific typo isn't shown in the provided data, it appears to be a straightforward text correction without any functional changes to the code.",
    "url": "https://github.com/django/django/commit/82b913cd6c95e9d5161f9fec599538c46571a72e"
  },
  "f14cab28a50e1585eac5a3456217a03f5c335c56": {
    "summary": "This commit fixes a typo in the documentation (docstring) within Django's query.py file, which is part of the database models system. The change was made by Jacob Walls and involves a single line modification (1 addition, 1 deletion). This is a simple documentation cleanup that doesn't affect functionality.",
    "url": "https://github.com/django/django/commit/f14cab28a50e1585eac5a3456217a03f5c335c56"
  },
  "989329344aabe8ef7a5e55bebfde53f0e00f42e2": {
    "summary": "This commit adds support for object-based script assets in Django form media, addressing issue #35886. The changes allow more detailed control over script attributes in form media declarations.\n\nKey changes:\n- Modified `widgets.py` to handle object-based script assets\n- Updated documentation in `media.txt` to explain the new functionality\n- Added release notes in Django 5.2\n- Significantly updated test coverage for media handling\n\nThe commit enables developers to specify script attributes (like `async`, `defer`, etc.) when declaring form media, rather than just using simple string URLs. This provides more flexibility in how form-related JavaScript assets are loaded.",
    "url": "https://github.com/django/django/commit/989329344aabe8ef7a5e55bebfde53f0e00f42e2"
  },
  "b322319f9d779b8726436421daae2862a380061d": {
    "summary": "This commit addresses GitHub issue #36034 by adding a new system check in Django for relationship fields (ForeignKey, ForeignObject, and ManyToManyField) when they reference models with composite primary keys.\n\nKey changes:\n- Added validation logic in `related.py` to check for composite primary key relationships\n- Updated documentation to include new system check information\n- Added comprehensive test cases to verify the new validation behavior\n\nThe commit appears to be a feature addition that helps developers identify potentially problematic relationships with composite primary keys early in development through Django's system check framework.\n\nThe large number of test additions (129 lines) suggests thorough testing of various edge cases and scenarios.",
    "url": "https://github.com/django/django/commit/b322319f9d779b8726436421daae2862a380061d"
  },
  "2a61b5f97c0f9ec9ff3f321090bd8e6ed609793c": {
    "summary": "This commit fixes issue #373 where providing a db_column parameter to CompositePrimaryKey was causing an error. The changes involve:\n\n1. Modifying the composite primary key field implementation in `fields/composite.py` (+2 lines)\n2. Adding test cases in `test_checks.py` (+5 lines) to verify the fix\n\nThe commit appears to be a bugfix that allows proper handling of database column names in composite primary keys within Django's ORM.",
    "url": "https://github.com/django/django/commit/2a61b5f97c0f9ec9ff3f321090bd8e6ed609793c"
  }
}
